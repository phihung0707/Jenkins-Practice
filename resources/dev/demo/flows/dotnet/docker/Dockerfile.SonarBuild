ARG BASEIMG
ARG IMG_VERSION
FROM $BASEIMG:$IMG_VERSION as build
COPY . .
ARG SONAR_TOKEN
ARG SONAR_PROJECT
RUN dotnet tool install --global dotnet-sonarscanner \
&& dotnet tool install --global dotnet-reportgenerator-globaltool \
&& apt update \
&& apt install openjdk-11-jdk -y
&& docker container start 1ff4f8b1b9a1fa5dc76cd5405a93facc3697c590a3f622f5fd91a1cbe4ba689f
ENV PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.dotnet/tools" \
    JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"

RUN dotnet sonarscanner begin \
  /k:$SONAR_PROJECT \
  /d:sonar.login=$SONAR_TOKEN \ 
  /d:sonar.host.url=http://localhost:9000 \
  /d:sonar.coverageReportPaths="./sonarqubecoverage/SonarQube.xml" \
  /d:sonar.qualitygate.wait=true \
  /d:sonar.qualitygate.timeout=900 \
&& dotnet build -c Release -p:DOTNET_RUNTIME_IDENTIFIER=linux-x64 . \
&& dotnet test --no-build -c Release -p:DOTNET_RUNTIME_IDENTIFIER=linux-x64 --collect:'XPlat Code Coverage' --verbosity minimal --results-directory ./results \
&& reportgenerator "-reports:./results/*/coverage.cobertura.xml" "-targetdir:sonarqubecoverage" "-reporttypes:SonarQube" \
&& dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN
